name: tests

on:
  push:
    branches:
      - 'master'
      - 'ci'

  pull_request:
    branches:
      - 'master'
      - 'dev'

env:
  RUST_BACKTRACE: 1

jobs:
  tests:
    strategy:
      fail-fast: false
      matrix:
        # minimum supported rust version
        rust: [1.56.1, stable]
        on: 
          - { os: ubuntu-latest, target: x86_64-unknown-linux-gnu }
          - { os: macos-latest, target: x86_64-apple-darwin }
          - { os: windows-latest, target: x86_64-pc-windows-msvc }

    runs-on: ${{ matrix.on.os }}
    steps:
      - uses: actions/checkout@v3

      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.on.target }}

      - name: Generate lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile

      - name: Build tests
        run: cargo test --no-run --locked --all-features

      - name: Run tests
        run: cargo test --locked --all-features

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install nightly
        uses: dtolnay/rust-toolchain@nightly

      - name: cargo doc
        run: cargo doc --no-deps --all-features --document-private-items
        env:
          RUSTDOCFLAGS: --cfg docsrs -D warnings

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Run rustfmt
        run: cargo fmt -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Run clippy
        run: cargo clippy --all --examples --tests -- -D warnings

  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile

      - name: llvm-cov
        run: cargo llvm-cov --locked --all-features --lcov --output-path lcov.info

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code_coverage_result
          path: lcov.info

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: true